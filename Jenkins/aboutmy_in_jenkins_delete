jenkins working experience:-

1. worked on maven build tool using maven build tools building the war file and deploying into application server like tomcat.
2. hands on experience working on managing local users
3. integrating with Active Directory 
4. working on with managing node 
5. working on jenkins with high availability 
6. working with jenkins file for pipeline declarative script automating the jobs 

What kind of jobs you wrote scrite to automate :-

1. installing fix packs
2. Airflow dags_inventory and image vulnerability integrating with ibm cloud or aws cloud 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. jenkins integrationg with sonar qube 
jenkins interate with sonar qube

what is sonar qube 

it scans the code or it code smells it checks the quality of code checks the bugs vunerality 
before it deploy into production and also based on this we can advised the developers to check and build better code   

1. install sonar qube
2. install my sql database
3. install sonar scanner on jenkins server 
4. we can install sonar qube on our jenkins or different server
5. install sonar qube plugin in jenkins under manage jenkins
   and go to configuration system and configure sonar qube details
   1. sonar name
   2. server url:http://<Sonarqube_server>:9000/sonar --> here if ur installed sonar qube on same server the use localhost
                                                           if different server then use use that server ip address
   3. sonar qube server authenthication token ---> to get authentication toke login to sonar qube dashboard or ui 
                                                  go to --> My Account > Security > generate token copy that token and paste it
                                                   here 

6. install sonar scanner plugin under manage jenkins 
   and go to > Global Tool Configuration > SonarQube Scanner

    Name : sonar_scanner
    SONAR_RUNNER_HOME : /opt/sonar_scanner --> where sonar scanner is installed home path

7. Set SonarQube server details in sonar-scanner property file

sonar.host.url=http://<SONAR_SERVER_IP>:9000

8. Create a job to test SonarQube:-

9. under build step:-

enter app name/project 
app version / project version
sonar location / where your project source(src) file there 
and build the job 

10. after build is success go into ur sonar qube dashboard and check the quality of ur code
11. sonar qube run on default port on --9000
---------------------------------------------------------------------------------------------------------------------

4. jenkins integarting with ibm amd aws cloud to login to cr registory build docker images and push to ibm or aws clud 
5. using blueocen plugin to work on jenkins file since it will show difeerent stages of build also we start wer it is failed 
when we want to run the build again 
6. integarting with kubernets 
7. integarting with docker
8. integarting with ansible
9. integarting with packer 


sh('docker build -t us.icr.io/mip-prod-namespace/mipdashboard:${BUILD_NUMBER} -f Dockerfile .')
                sh('docker images')
                sh('docker push us.icr.io/mip-prod-namespace/mipdashboard:${BUILD_NUMBER}')
                sh('ibmcloud cr image-tag us.icr.io/mip-prod-namespace/mipdashboard:${BUILD_NUMBER} us.icr.io/mip-prod-namespace/mipdashboard:latest')
                sh('ibmcloud cr image-list --restrict mip-prod-namespace')


        stage ("Deploy the MIP-Dashboard to prod cluster") {
            environment {
                IBMCLOUD_CREDS = credentials('ibm-cloud-cr')
            }
            steps {
                sh('ibmcloud login --apikey ${IBMCLOUD_CREDS_PSW} -r us-south')
                sh('ibmcloud ks cluster config --cluster map-dal10-16x64-03')
                sh('kubectl config current-context')
                sh('kubectl rollout restart deployment mipdashboard -n mipdashboard')



 
